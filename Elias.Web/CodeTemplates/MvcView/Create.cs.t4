<#@ template language="C#" HostSpecific="True" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;

int index = ViewDataTypeName.LastIndexOf('.');
string entityName = ViewDataTypeName.Substring(index + 1);

PluralizationService ps = PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us"));
string entityNamePlural = ps.Pluralize(entityName);

// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "Create <#= entityName #>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

@section Breadcrumb {
    <ul class="breadcrumb">
		<li>
			<a href="@Url.Action("index", "home")">Dashboard</a>
		</li>
		<li>
			<a href="@Url.Action("index")"><#= entityNamePlural #></a>
		</li>
        <li class="active">
            <span>@ViewBag.Title</span>
        </li>
    </ul>
}

<h3>@ViewBag.Title</h3>
<hr />
<br />

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
@using (Html.BeginForm("<#= ViewName.ToLower() #>", "<#= entityNamePlural.ToLower() #>", FormMethod.Post, new { @class = "form form-horizontal" })) 
{   
    <div class="form-body">
	    @Html.AntiForgeryToken()
		<input type="hidden" name="returnUrl" value="@Html.ReturnUrl(Url.Action("index"))" />

		@Html.Partial("ValidationSummary", ViewData.ModelState)
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
		if(property.PropertyName == "IsDeleted" || property.PropertyName == "CreationDateTime" || property.PropertyName == "UpdateDateTime" || property.PropertyName == "CreatedByUserId" || property.PropertyName == "UpdatedByUserId")
		{
			continue;
		}

#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.SCILabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-3" })
<#
        } else {
#>
            @Html.SCILabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-3" })
<#
        }
#>
            <div class="col-md-4">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                @Html.CheckBoxFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
            </div>
        </div>

<#
    }
}
#>
	</div>
    <div class="row">
		<div class="col-md-offset-3 col-md-9">
			<a href="@Html.ReturnUrl(Url.Action("index"))" class="btn btn-default">
                <i class="fa fa-long-arrow-left"></i>
                Back to List
            </a>
			<button type="submit" class="btn btn-success">
				Create
                <i class="fa fa-check"></i>
			</button>
        </div>
	</div>
}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>